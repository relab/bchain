// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bchain/bchain.proto

/*
Package bchain is a generated protocol buffer package.

It is generated from these files:
	bchain/bchain.proto

It has these top-level messages:
	ChainMsg
	AckMsg
*/
package bchain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChainMsg struct {
	ID int64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Op string `protobuf:"bytes,2,opt,name=Op" json:"Op,omitempty"`
}

func (m *ChainMsg) Reset()                    { *m = ChainMsg{} }
func (m *ChainMsg) String() string            { return proto.CompactTextString(m) }
func (*ChainMsg) ProtoMessage()               {}
func (*ChainMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChainMsg) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ChainMsg) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

type AckMsg struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *AckMsg) Reset()                    { *m = AckMsg{} }
func (m *AckMsg) String() string            { return proto.CompactTextString(m) }
func (*AckMsg) ProtoMessage()               {}
func (*AckMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AckMsg) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*ChainMsg)(nil), "bchain.ChainMsg")
	proto.RegisterType((*AckMsg)(nil), "bchain.AckMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BChain service

type BChainClient interface {
	// rpc Request(stream ClientRequest) returns (Empty) {}
	// rpc Reply(stream ClientReply) returns (Empty) {}
	Chain(ctx context.Context, opts ...grpc.CallOption) (BChain_ChainClient, error)
}

type bChainClient struct {
	cc *grpc.ClientConn
}

func NewBChainClient(cc *grpc.ClientConn) BChainClient {
	return &bChainClient{cc}
}

func (c *bChainClient) Chain(ctx context.Context, opts ...grpc.CallOption) (BChain_ChainClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BChain_serviceDesc.Streams[0], c.cc, "/bchain.BChain/Chain", opts...)
	if err != nil {
		return nil, err
	}
	x := &bChainChainClient{stream}
	return x, nil
}

type BChain_ChainClient interface {
	Send(*ChainMsg) error
	Recv() (*AckMsg, error)
	grpc.ClientStream
}

type bChainChainClient struct {
	grpc.ClientStream
}

func (x *bChainChainClient) Send(m *ChainMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bChainChainClient) Recv() (*AckMsg, error) {
	m := new(AckMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BChain service

type BChainServer interface {
	// rpc Request(stream ClientRequest) returns (Empty) {}
	// rpc Reply(stream ClientReply) returns (Empty) {}
	Chain(BChain_ChainServer) error
}

func RegisterBChainServer(s *grpc.Server, srv BChainServer) {
	s.RegisterService(&_BChain_serviceDesc, srv)
}

func _BChain_Chain_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BChainServer).Chain(&bChainChainServer{stream})
}

type BChain_ChainServer interface {
	Send(*AckMsg) error
	Recv() (*ChainMsg, error)
	grpc.ServerStream
}

type bChainChainServer struct {
	grpc.ServerStream
}

func (x *bChainChainServer) Send(m *AckMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bChainChainServer) Recv() (*ChainMsg, error) {
	m := new(ChainMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BChain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bchain.BChain",
	HandlerType: (*BChainServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chain",
			Handler:       _BChain_Chain_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bchain/bchain.proto",
}

func init() { proto.RegisterFile("bchain/bchain.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x4a, 0xce, 0x48,
	0xcc, 0xcc, 0xd3, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x92,
	0x16, 0x17, 0x87, 0x33, 0x88, 0xe1, 0x5b, 0x9c, 0x2e, 0xc4, 0xc7, 0xc5, 0xe4, 0xe9, 0x22, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0xc4, 0xe4, 0xe9, 0x02, 0xe2, 0xfb, 0x17, 0x48, 0x30, 0x29, 0x30,
	0x6a, 0x70, 0x06, 0x31, 0xf9, 0x17, 0x28, 0x49, 0x70, 0xb1, 0x39, 0x26, 0x67, 0x63, 0x51, 0x69,
	0x64, 0xc9, 0xc5, 0xe6, 0x04, 0x36, 0x46, 0x48, 0x9f, 0x8b, 0x15, 0xc2, 0x10, 0xd0, 0x83, 0xda,
	0x07, 0x33, 0x5e, 0x8a, 0x0f, 0x26, 0x02, 0x31, 0x44, 0x89, 0x41, 0x83, 0xd1, 0x80, 0x31, 0x89,
	0x0d, 0xec, 0x1e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0xaa, 0x4e, 0x24, 0xa6, 0x00,
	0x00, 0x00,
}
